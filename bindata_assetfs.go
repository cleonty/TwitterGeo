// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package main generated by go-bindata.// sources:
// public/TwitterGeo.css
// public/TwitterGeo.js
// public/index.html
package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicTwittergeoCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\x4b\x6a\xc3\x30\x10\xdd\x07\x72\x87\x81\x2e\xbc\xa9\x20\x6d\xc9\x46\xb9\x45\x6f\x30\xb6\x64\x7b\xa8\x3c\x23\xa4\x71\x63\xb7\xe4\xee\x25\xfe\x10\x1b\x4a\xe9\x4e\xef\x31\x7a\xbf\x52\xdc\x08\xdf\xc7\x03\x40\x44\xe7\x88\x1b\x0b\xa7\xcb\x1d\x76\x98\x1a\xe2\x19\xdd\x8e\x87\xa7\x0e\xe3\x72\x27\x99\x94\x84\x2d\x60\x99\x25\xf4\xea\xa7\x7b\x95\xb8\x7e\x0d\xbe\xd6\xf5\x9d\xa8\x69\xd5\xc2\xdb\xeb\x29\x0e\x13\x51\x8a\xaa\x74\x0f\x5d\x95\x68\x22\xb2\x0f\x7f\xaa\xaf\x69\xb0\x57\x79\xd8\xbd\xac\xa2\xbf\x38\xce\xe0\xcb\x10\x3b\x3f\x58\x38\xcf\xe6\x58\x7d\x34\x49\x7a\x76\xa6\x92\x20\xc9\x82\x26\xe4\x1c\x31\x79\xd6\xcb\x6e\x85\xf3\x22\xad\x7e\x50\x83\x81\x1a\xb6\x50\x79\x56\x9f\x26\xba\x16\x56\x53\x63\x47\x61\xb4\x50\xbc\x4b\x29\x2a\xc5\x73\x91\x91\xb3\xc9\x3e\x51\x5d\x2c\xfd\x02\x65\xfd\xef\x70\xbb\xe8\xdb\xa1\x00\xae\xe4\xb4\xdd\xee\x28\x9f\x3e\xd5\x41\xae\x66\xb4\x90\xab\x24\x21\xec\xe9\xc1\x42\x4b\xce\x79\xde\xe6\x08\x34\x47\xa9\xfa\x94\xef\xed\xa3\xd0\xd2\xe8\x76\x3c\xfc\x04\x00\x00\xff\xff\xce\x3d\xfa\xf4\x0b\x02\x00\x00")

func publicTwittergeoCssBytes() ([]byte, error) {
	return bindataRead(
		_publicTwittergeoCss,
		"public/TwitterGeo.css",
	)
}

func publicTwittergeoCss() (*asset, error) {
	bytes, err := publicTwittergeoCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/TwitterGeo.css", size: 523, mode: os.FileMode(438), modTime: time.Unix(1590200575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicTwittergeoJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x7b\x6f\x1b\xb9\x11\xff\x3f\x40\xbe\x03\x4f\x30\xa0\xf5\x45\x5e\xc9\xf1\xdd\xf5\x2a\x5b\x2e\xf2\xbc\xa8\xb5\x9d\x20\xb1\x9b\xf6\x52\xc3\xa6\x96\xa3\x5d\x9e\xb9\xe4\x86\xe4\x5a\x56\x7d\xfa\xee\x05\xb9\x2f\xee\x4b\x76\x80\xe2\xee\x1f\xc3\x22\x87\x33\xc3\xdf\x0c\xe7\xb5\xe3\xef\x51\xc8\xc4\x02\x33\x14\x0a\x11\x32\x40\xdf\x8f\x9f\x3e\x79\xfa\x64\x99\xf2\x40\x53\xc1\xd1\xf9\x0a\x40\x7b\xda\xfc\x7d\xbf\xf8\x0d\x02\x3d\x42\x31\x4e\x46\x88\x51\xa5\x77\xd1\xfd\xd3\x27\x08\xe9\x88\x2a\xdf\xa1\x40\x33\xe4\xfc\x3a\x2c\x49\x62\x9c\xa0\x99\x39\x5d\x2d\x51\xbe\x14\x9f\x29\x27\x62\x55\xad\x19\xce\x68\x66\x05\xb8\x67\xe5\x0d\x48\xc3\xd9\xfc\x0a\x24\x60\x0d\xa7\x76\xcd\xdb\xad\xa8\x22\x1d\xb3\x57\x82\x6b\xe0\xba\x20\x0d\x41\xbf\xab\x56\x5d\xe2\x4a\x76\x9d\xed\xbc\x5c\x77\xa9\x8d\x3a\x73\x0d\x71\x9d\xf6\x24\x5f\x75\x29\x05\x7f\x11\x68\x7a\x9b\xef\x02\x07\xa9\xd0\x0c\x7d\xb9\xac\x28\x08\x2c\xd2\x10\xcd\xd0\x12\x33\x05\x87\x4f\x9f\x6c\x0c\xe2\x16\x68\x3f\x91\x42\x0b\xbd\x4e\xa0\xa1\xb8\xa1\x2e\x4c\xe2\xe5\xb8\xdf\x62\x89\x18\xe5\x37\x9f\x34\x96\xe5\x7d\x1d\xe4\x7d\x0d\x77\xda\x67\x58\xe9\x39\x27\x70\xf7\x7e\xe9\x0d\x22\xad\x13\x35\x1d\x8f\x07\x99\xbe\x86\x43\x22\xc5\x92\x32\x98\xc7\x38\x84\x0b\xc9\xba\xf8\xa4\x0a\xa4\x9f\xd3\x5d\x51\x43\x78\x95\x4a\x76\x65\x99\x95\x7c\x96\x42\xc6\x58\x6b\x20\xe7\x70\xa7\x3b\x56\x69\x0c\x8e\x4d\xde\xba\xeb\x5e\xa5\x8d\x11\xf5\x21\x93\x74\x42\xf9\x8d\x73\xe2\xa2\xbe\x93\x9f\xa1\x4b\xe4\x55\x18\x1c\xcf\xd0\x24\x07\x27\x63\x67\x10\x78\x2b\x71\x18\x3b\x1e\xd1\x42\x48\xa5\x0b\xa5\xa5\x37\x19\x55\x68\x66\xcc\x2b\x88\x1f\xcb\xc3\x61\x80\x32\x0e\x35\x58\xd0\x0c\x5d\xef\xdc\xbb\x4a\x6d\xd0\x11\x46\x1a\xcb\x10\xf4\x6c\x70\xb5\x60\x98\xdf\x0c\x50\x24\x61\x39\x1b\xec\xdc\xbb\x92\x37\x83\xe3\xc6\xc2\xd1\x18\x1f\x5f\x5b\x3d\x37\x08\x98\x82\xe2\xde\x06\x92\xca\xcd\x4a\x38\x10\x0a\x04\x57\x82\x81\x75\x7c\x6f\x78\x26\x34\x5a\x8a\x94\x13\x74\xf1\xf1\x04\x51\x9e\xbd\xd9\xe1\xa8\xfb\x82\x05\x20\x9b\xee\x5b\x75\x9e\xc9\x74\x33\x7f\x24\xe8\x54\x72\xf4\x25\x3b\x7c\x7d\x44\xe8\x2d\x0a\x18\x56\x6a\x36\x88\x81\x50\x3c\x38\xbe\x1e\xe5\x7b\x08\xb5\x76\xf7\x18\x2c\x75\x8d\x04\x21\x03\x5b\x01\x53\xc3\x67\x36\x83\x26\xa0\xc7\x47\x34\x0e\x91\x92\x81\xa1\x6e\xf8\xfb\x66\x50\x97\x25\xac\xfe\x03\xa4\xf4\x9a\xc1\x6c\xb0\xa2\x44\x47\xd3\x1f\x7e\x4e\xee\x06\xc7\x16\x70\x47\xcf\x31\xa1\xb7\xdb\x15\x5f\x08\xb2\x6e\x28\x7e\x14\xfd\x50\xa7\x89\x00\x13\xca\xc3\xc1\xf1\x37\xdd\x68\xe7\xbe\xfb\x95\x72\x1c\x83\xf5\x8c\xa3\x71\xf4\x43\x43\x72\x72\xbc\x73\x5f\x33\xdc\xe6\x68\x9c\xb4\x68\xcc\x83\x9c\x22\x97\x92\x5a\x96\x86\xd2\x90\xf4\xdd\x3f\xff\x69\x7e\x5d\xfa\xbf\x09\xca\xbd\xe1\x7f\xf8\xd0\xf8\xcd\xe6\xb0\x27\xbe\xbd\x6d\x04\x87\x56\x84\x2b\x17\x30\x21\xbf\x82\x14\xf3\xe5\x19\x00\x01\xe2\xdd\x95\x6e\x9d\xbb\x96\x37\x98\x0c\xd0\x33\x74\xb7\x5b\xbc\xc4\xbd\xe7\xbb\x95\xff\x99\x67\x4c\xb0\x36\x32\x38\xac\xd0\x6b\xac\xc1\x6b\xe1\x97\x45\x74\x72\x85\x75\x15\x8e\xa2\x08\xcd\x5a\xc2\x0d\x27\x1b\x9e\x45\x2a\x95\xb7\x5b\x51\xc7\xf1\x16\xea\x53\xca\x53\x0d\x35\x7a\x42\xb6\xd0\x5b\x25\x1d\xe2\xd3\xd3\x6d\xcc\x05\xd7\x91\xb7\x8b\x9e\xa1\xfd\xea\xc4\x7a\xbd\xe5\xc4\xbf\x01\x4b\x6f\x17\xed\xa1\xfd\xc9\x24\x3b\x92\x23\x79\xbd\x73\x1f\x45\x9b\xe9\xce\x7d\x1c\x6f\xd0\xce\x3d\x21\x9b\xf1\xce\xfd\xe9\xa9\xf9\xbb\x5e\x6f\xae\xb7\xd9\xf3\xa2\x15\xbc\x5b\x16\x2d\x84\x14\x89\x48\xaf\xa8\xd6\x20\xfd\x40\xc4\xe3\x3e\x9f\x56\x81\x04\xe0\x57\xd6\xb5\xfb\xe5\xbb\x35\x41\x6f\xb6\xc4\x9a\xea\x94\xc0\x08\x31\xc1\x43\xfb\x6f\x99\x45\x5a\xb2\x43\x10\xa5\x97\x15\x07\xbb\x42\x5d\x08\xc2\x0f\x84\x90\x84\x72\xac\x41\x7d\x99\x5c\xe6\xb1\xb2\x94\xf1\x98\x53\xfb\x97\x6e\x28\xef\x54\x28\x61\x38\x80\x5a\x7a\xb3\x2b\xaf\x2a\x2e\x5d\x82\x2c\x8d\xbf\x30\x91\x9e\xf2\xf0\x6a\x21\xee\xba\xb5\x35\xfc\x2c\x95\xca\x5f\x49\x56\x0f\x9a\xaa\x4d\xf9\x27\x58\x9f\xf0\xf0\xa5\xdd\xf6\x8a\x5c\xb0\x14\x12\x79\xe6\x18\x45\x33\x34\x39\x44\x14\x1d\xb5\x34\xf2\x19\xf0\x50\x47\x87\x88\x3e\x7b\xe6\xa4\xa2\x4c\x90\x0f\x77\x1a\x38\xf1\xca\x65\x0b\xf4\xb4\xc5\xe4\x0b\xbd\xfc\xb2\x7f\x39\x42\xe3\x71\x65\x08\x44\x95\x49\x5a\xc0\xc0\xe6\xe5\x7d\x87\x05\x0f\xbb\x59\x4c\x2e\x91\x65\x51\x9a\xa5\xce\x62\x52\xb0\xd8\x34\x92\x9d\xb9\x62\x00\x5c\x5b\xbf\xca\x35\x0f\x41\xbf\xb2\x4b\x25\x1a\x8e\x8b\x64\xc4\x3e\xc3\xba\xda\x75\x7c\xa1\xd8\xe6\xa1\xd7\x88\x51\x65\x95\xdb\xc4\x3f\x2f\x75\x73\xa0\x12\xa1\xa8\xf1\xed\x69\x05\xa8\xc5\xad\x74\xef\x72\xd5\x40\x51\x8a\xce\x2f\x95\xef\xc6\x38\x99\x96\x75\x79\xbe\xa6\xa9\x66\x30\xed\xce\xe6\x56\xd1\x4c\xdf\x4c\x4d\x1f\x13\x52\x54\xb8\xde\x30\x60\x34\xb8\x29\xaa\x07\x9c\x17\xc0\xfe\x82\x72\x62\x1d\x79\xb7\x16\x63\x32\x06\x0f\x3c\xe5\xb9\x5b\x9f\x77\x3e\xe7\x5a\x05\xdf\x84\xcc\x29\xe3\x73\x94\x82\xac\x94\x9e\xb6\x7a\x85\x12\x91\xbb\xcf\x36\xdd\xa3\x83\xe7\x13\xe7\xba\xb9\xd2\xb5\x5e\x65\x9b\xe2\x27\x55\xab\xd0\x53\xb3\xa3\x19\x22\x22\x48\x8d\xdb\xe5\x67\xde\x64\x4e\xe8\x0d\x19\x1d\x66\x52\x19\xf5\x6d\x9d\x70\x86\x6d\x6e\x1c\x9a\x06\x64\x2f\x94\x22\x4d\xf6\xa8\x86\x78\x58\x10\x51\xce\x41\xbe\x3b\x3f\x3d\x29\x1e\xbf\x73\xb1\x82\x06\x13\xf2\xe6\x16\xb8\x7e\xbc\xb9\x46\x59\x73\xd2\x68\x80\x7c\x9c\x24\xc0\xc9\xab\x88\x32\xe2\x31\x5a\x83\x87\xd1\x5e\x58\x44\x02\x7c\xbb\x35\x1b\x0d\x99\x3d\xe1\x95\xce\xe9\xb6\x80\xfd\x05\x45\xc0\x84\x7a\xc0\x69\x9a\x62\xec\x11\xaf\x9f\x65\x01\x4c\x17\x2f\x13\xa2\xbf\xab\xe0\xab\x02\x73\xd6\x04\xd6\xae\x5c\x86\x81\x5a\x2b\x69\x12\x9b\x60\x6c\xce\xb5\xf8\x27\x85\x55\x99\xa2\xab\x28\x09\x11\xbe\xa5\x42\x4e\xd1\x40\xc5\x42\xe8\x68\x50\xbe\xec\x05\x13\xc1\x8d\x59\x37\xcd\xc6\x20\x7f\xd9\xdd\x52\xac\x17\x9d\x58\xeb\x11\xe2\x35\xfd\x68\xcf\xc0\x31\xac\x9d\xcc\xee\x63\xdc\x49\xa6\xe0\x6e\x70\xa1\xe9\x72\xfd\xbe\xdd\xdf\x56\x71\xac\x1b\x47\x02\x0f\x21\xd9\x0b\x64\xa7\xb5\xb6\x5d\x52\x42\x2c\x6e\xe1\x9b\xee\x59\xf4\xe1\x5b\x6e\xd0\x7b\xf5\xce\xb2\xb5\x23\x31\xf6\x8d\x06\x3a\x13\x64\x1f\xf1\x17\x7a\xe9\x07\x98\x31\x8f\xa7\x8c\x65\xcf\xe2\x01\xe4\x31\x21\x6d\xa5\x6b\x3a\x47\x98\x13\x06\xd2\xb5\xc5\x3a\x01\xb1\x44\xf9\x06\x9a\xcd\x66\x68\x58\xd0\x0f\x1f\xd4\xd1\x4f\x52\x15\x95\x5c\x1f\xf2\x0b\xa5\xa5\x58\xf7\x3e\xd5\x3c\xd1\x28\xd0\xa7\x38\xb1\x97\xae\xde\x6a\x7d\x42\x65\xc4\x7b\x9d\x83\xa9\x8e\xa9\x53\xe7\x84\xc9\xe6\xbb\xe6\xa4\x26\x73\x11\x2b\xc1\xa4\x98\x94\x31\x67\xaf\x16\x54\x75\xf1\x0c\xaa\x61\x8e\x75\xc7\xea\xb2\x0a\xf4\x79\x21\xa3\xba\xae\x93\x66\x95\xab\x76\xc0\x6c\x81\x7e\xd8\xeb\x4f\xce\xb9\x7e\x1f\xc2\x84\xb4\x06\x78\xc6\x8b\xba\xec\xd2\x50\xb7\x38\xda\xa7\xad\xeb\x30\xf5\xba\x16\xfd\xfe\x3b\xda\x5e\xb7\xea\x02\x50\x58\x75\x0d\x18\x1b\x81\xdf\x5a\xd4\x7d\xb8\x99\xa9\x32\x47\xb3\xff\x97\xbb\xd6\xbf\x3a\x7d\xde\xcb\xfd\xd5\x8a\x2b\x36\x49\xab\x40\xa9\x8f\x52\x8a\x89\x09\x13\xa1\x37\x3c\x13\xc8\x5c\xce\xc4\x11\xd3\xb6\x1a\x3c\xdc\xa9\x49\xe7\xc0\x64\x2b\xc2\xd6\xc4\xdf\x14\x3f\xf2\x8b\xf7\x9a\x3b\xdb\x37\x51\x22\x7f\x59\x6e\x81\xf9\xcd\x5e\xbe\x8a\x28\x83\x3c\x34\xdb\xec\xbf\xa4\x52\x69\x9b\xfc\xeb\x62\x59\x15\x77\xb3\xd2\xa0\xf3\xc8\xc3\x80\x34\xad\xd3\x76\xbd\xee\x8c\x91\x69\xfe\xdd\x2c\x9f\x3b\xb7\x5d\xad\xde\x18\xa9\x2d\xfd\xcb\x16\x84\x1d\x5f\x37\x10\x77\xc8\x2b\x5d\x30\x37\x41\x91\xf4\xca\x9c\x55\xb6\x14\x9b\x56\x1a\x2a\xd0\xb7\xe7\x1f\xf1\x3a\x73\xd6\x67\x70\xa7\xdb\xcf\x74\x0b\x4c\x35\x70\x78\x71\xda\x0e\x88\xeb\x20\xf9\x34\x1f\x1a\xb7\x39\x3c\x43\xfb\x87\x8d\x59\x63\x7e\xed\x3a\xc3\x4b\x07\x99\x2d\x54\x7e\x0b\xa7\xfa\x2b\xac\x1f\x9e\x74\xd1\xf7\xb6\xce\x85\x29\xd1\xb1\x33\x19\xde\xce\xee\x51\xb8\x7f\x90\x70\x4b\x45\xaa\xfe\x70\xec\xf7\xfe\x4c\xec\x3b\x70\xdd\x43\xfb\x7f\xaa\x41\x04\xff\x07\xac\x3f\x48\x50\xaa\x11\x2f\xc0\x31\x04\xf8\x81\x30\xad\xb7\xa9\x64\x5e\x48\x29\x56\x17\x49\x55\xc8\x80\x9f\x48\x30\x89\xfc\x35\x2c\x71\xca\xaa\x9e\x1d\x7c\xa5\x45\xf2\x41\x8a\x04\x87\x36\xde\x7b\xed\xf2\xb1\xe9\x0a\xde\x6e\x73\x8c\xd3\x92\xfd\x5a\xac\xf8\xff\x4f\x7a\x19\x00\x1e\x07\xd6\xe7\x08\x80\x75\xe2\xd4\x27\x2f\xbb\xc3\xca\x9c\x7b\x0d\x4c\xe3\xb6\xe1\x1e\x01\x44\x17\xf9\x37\x69\xde\x2e\xb6\xba\x1e\x5d\xd9\x54\xb7\x1b\xde\x1b\x58\x13\x03\xfc\xa8\x28\x5c\x2b\xb7\x69\x15\x01\x5b\xd8\x58\x1c\x2a\x26\x16\xce\xc6\xf9\x56\x79\x6a\x27\x9c\xbf\x80\x30\xf5\xe9\x9c\x8c\x50\x24\x62\x78\x99\x6a\x2d\xb8\xf9\x65\x5b\x18\xd2\xa8\x58\xe7\x24\xab\x59\xe7\xc4\xf9\xb8\xe9\x1c\x43\xb3\x1a\x97\xc6\x67\x4a\x92\x17\xb7\xcd\x0d\x77\xec\x10\x82\xce\x67\x0e\x2f\xd7\x73\xd3\xcc\x5b\x2d\xdc\x0f\xae\x77\x1f\x31\xa1\xa9\xc1\xf9\xa0\x5a\x0e\x41\xbc\x4f\xcc\xbd\xcc\x7a\xe1\xc2\x1c\x2f\x18\xbc\xa3\x61\xf4\x22\x08\x52\x89\x83\xf5\xd4\xb6\x8e\xd5\x58\x85\xc6\x69\xfc\x22\x84\x29\x3a\x98\x4c\x26\x93\x72\xd8\x14\x83\x48\xf5\x14\x3d\xff\xcb\x64\x92\xcd\x5b\x9a\xdf\x8a\x6b\x1f\x7b\x13\xf7\x23\xab\x2e\x7c\xc4\xad\x22\x6d\x13\xd0\x5b\x3c\x16\x05\xf1\xbb\x12\xb8\xf7\xfc\x15\xa3\xc1\x4d\x69\x5d\x87\x2e\x14\xe7\xe2\x55\x2a\x25\x70\xfd\x21\x9f\xb6\xb9\xdb\x2b\xac\x83\xe8\x14\x27\xb5\xbd\xbc\xf2\x2f\xcc\xdd\x31\x9b\x4e\xfa\x46\x42\xea\x6b\x8a\x25\xec\xff\x75\xf2\xa3\x81\xd5\x0e\xf3\x7e\xfc\xc9\xff\xf9\xe0\xe0\xe0\x60\x32\xca\xc6\x78\x3f\x4d\xfc\x1f\xcd\xc2\x64\x53\x7d\x6f\xb0\x0c\xdb\xb3\xc2\xc4\xeb\x33\x73\xe5\x5f\xbb\xa3\xc2\x7c\xff\x15\x22\x9e\xa2\xfd\x9f\x72\xb3\x64\xd3\xc9\xa9\xa3\x52\x35\x30\x3c\x5f\x27\x30\x27\x53\x34\x8c\xd6\x0b\x49\xc9\x30\xdf\xb9\x81\xf5\x42\x60\x49\x3e\x45\x42\xea\x20\xd5\x6a\x9a\xb5\xd4\xed\x19\x5a\xd6\x86\x15\xcf\xbc\x03\x29\x09\x4c\x60\xd2\xd1\x27\x39\x60\xc9\xc2\x2f\xf7\x4b\x24\xca\xc1\x75\x71\x41\x73\xf1\xda\xb8\xda\x84\xb1\x8c\xaa\x91\x85\x3f\x08\x6a\xbf\xeb\x56\x83\xdd\x33\x21\x75\xf4\x06\xab\x2a\x16\x5b\x13\xad\xda\x94\x9f\x44\xaa\xa3\xcf\xd0\xa0\x24\x54\x69\xcc\x03\x40\xb3\x9a\x5d\x42\x10\x31\x68\xb9\xf6\x55\x12\x81\xa4\x01\x66\x7e\x20\xe2\x24\xd5\xf0\x3a\x3f\xf0\x12\x8c\x5b\x73\x2f\x57\x6a\x54\xc8\x74\x99\x97\x97\xf7\x4a\x31\x63\xf4\x7c\x32\x99\xec\xfa\x5a\xbc\xa5\x77\x40\xbc\xfd\x82\xbe\xa4\x3d\xc5\x3a\xf2\x63\xca\xbd\x6c\x65\xd4\x78\xe2\x8d\x29\xb4\x2e\x0d\x93\x03\x5a\xc2\x5c\x4e\xc1\x5d\x98\x6b\x73\x70\xf7\x2b\x4b\x63\x12\x3e\xda\x3e\x04\xb7\x18\x03\x96\x41\x74\x21\x4d\x41\x0e\xdc\xe4\xcd\x8b\x8f\x73\xef\xba\xf8\x4a\x34\xce\xf6\xc7\x7f\xfb\x3a\x0b\x41\x98\xed\xe9\xce\x7d\x21\x6d\x33\xda\xb9\x2f\x05\x98\x1f\xd9\x5d\x37\x37\xf1\x75\x53\xc0\x47\xf8\x9a\x42\x19\x3a\xfe\x75\x7a\xf2\x4e\xeb\x24\x5f\xcc\xb5\xa9\x11\x66\xe3\xc8\xe1\x2f\x6f\xce\x87\xa3\x4a\xc7\x91\x0d\x72\x9d\xe4\xdc\x38\x71\x67\x96\xcd\xd4\xf8\x4d\x09\xfe\x11\x54\x22\xb8\x32\x58\xfc\xfd\xd3\xfb\x33\x3f\xc1\x52\x81\x57\x67\x24\x73\x9a\x73\xe7\x0b\x7c\xad\xa9\x71\x19\xf9\x4a\x63\x9d\x2a\x50\x65\x33\x5c\xbe\xaf\x32\x5a\x56\x43\x88\xbc\x91\xc9\x4d\xdf\x79\x09\x90\x52\xc8\x9e\x5b\xb8\x9d\x31\xf4\x33\x51\xc0\x49\x6d\xbe\xfa\xc0\x93\x2f\x66\xa0\x5d\x4f\xdf\x15\x39\x30\x41\x6b\x30\xaa\xf9\xe1\xaf\x42\xc4\xc5\x07\xd3\xb2\xe6\xac\xed\xa1\x63\xb4\xbf\x5f\xaf\x5d\x5c\xe1\xed\x3a\xa4\x43\xdb\x10\xc4\xa7\x34\x08\x40\xd5\xc3\x53\xf1\x49\xa6\x43\xd7\xe1\x19\xac\xaa\x4f\x36\xc3\x51\xf9\x7f\xf6\x1d\x4e\xf9\xd5\x57\xc9\xd6\x4e\xe1\xcf\xb5\xc4\x9c\x18\x2b\xe6\xaf\xae\xfa\x3e\x39\xed\xe7\x9b\xd3\xd8\xef\x62\x7d\x12\x9c\x58\xdd\x0d\xcc\x76\x4c\xde\xf4\xfa\x0a\x66\x20\xb5\x77\xad\x84\x94\xeb\x11\xda\xb9\x07\x3f\x06\xa5\x70\x08\x9b\xeb\x07\xd8\xda\x24\x5b\x64\xd8\x2e\x8f\xe0\xf8\x96\x86\x58\x0b\x69\x34\x60\x22\xb0\x65\x6b\xfd\x98\x57\x54\x2d\xb9\xd1\x6a\x9f\x38\x8a\x3d\xab\x7c\xe7\x4e\x5e\xeb\x3c\x46\x51\xa7\x1a\xd8\x32\xcf\x4c\xea\x5f\xcd\x88\xc4\x21\x70\x52\x14\x94\x5d\x4f\xa1\x55\x9d\x76\x73\x32\x0f\xe2\x2a\x88\x30\x0f\xe1\x5b\xd8\x6d\xb3\x6a\xbb\x04\x7a\xbc\x11\x4c\x5e\x68\x94\x4f\x7f\x84\x25\xb6\x95\x77\x7d\xe5\x44\x55\x48\x6f\xa9\x8f\x5b\x15\x78\x15\x67\xaa\xd5\x32\xb4\x54\x4b\x0f\x7d\x7a\xeb\x00\xb9\x3d\x93\xcc\xae\xfc\xbf\x00\x00\x00\xff\xff\x73\x86\x53\xf9\xaa\x29\x00\x00")

func publicTwittergeoJsBytes() ([]byte, error) {
	return bindataRead(
		_publicTwittergeoJs,
		"public/TwitterGeo.js",
	)
}

func publicTwittergeoJs() (*asset, error) {
	bytes, err := publicTwittergeoJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/TwitterGeo.js", size: 10666, mode: os.FileMode(438), modTime: time.Unix(1590202750, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x51\x4f\xd4\x40\x10\x7e\x37\xf1\x3f\x8c\x7d\xe0\x20\xe1\xba\x02\x0f\x1a\xed\x62\x50\x01\x89\x51\x30\xf2\x02\x6f\xd3\xed\x70\xdd\xbb\xed\xee\xba\x3b\xed\x51\x8d\xff\xdd\xb4\xb4\xc7\x79\xa0\xe1\xa9\x3b\xf3\x65\xbe\xf9\xbe\x99\x69\xf6\xe2\xe3\xf9\x87\xcb\xab\x8b\x63\x28\xb9\x32\x87\xcf\x9f\x65\xc3\x17\x20\x2b\x09\x8b\xfe\x05\x90\xb1\x66\x43\x87\xa7\xe4\xe0\x72\xa9\x99\x29\x64\xe2\x2e\x35\xe0\x15\x31\x82\xc5\x8a\x64\xd2\x68\x5a\x7a\x17\x38\x01\xe5\x2c\x93\x65\x99\x2c\x75\xc1\xa5\x2c\xa8\xd1\x8a\xa6\x7d\xb0\x0b\xda\x6a\xd6\x68\xa6\x51\xa1\x21\xb9\x97\xbe\x4c\x46\x2e\xa3\xed\x02\x02\x19\x99\x44\x6e\x0d\xc5\x92\x88\x13\x28\x03\xdd\xc8\xa4\x64\xf6\xf1\x8d\x10\x15\xde\xaa\xc2\xa6\xb9\x73\x1c\x39\xa0\xef\x02\xe5\x2a\xb1\x4a\x88\x83\xf4\x20\x7d\x25\x54\x8c\xf7\xb9\xb4\xd2\x36\x55\x31\x3e\xa9\xd3\xe0\xf3\x94\xdc\x5f\x25\x51\x05\xed\x19\x62\x50\xf7\x62\x70\x8e\xb7\xe9\xcc\xb9\x99\x21\xf4\x3a\xf6\x42\xba\x9c\x30\x3a\x8f\x62\xfe\xa3\xa6\xd0\x8a\x83\x74\x3f\xdd\x1b\x82\x5e\xc8\x3c\x26\x87\x99\xb8\xe3\xfb\x1f\xfb\x53\xad\xce\x37\x9d\x3e\x68\x90\x89\xd5\x4a\xb3\xdc\x15\xed\xd8\xb5\xd0\x0d\xe8\x42\x26\x15\xfa\xae\xa2\xd0\xcd\x26\xc2\xce\x4f\x3d\x5a\x32\xe3\x1c\x00\x32\x6d\x7d\xcd\x3d\x5a\xba\x8a\x12\xe0\xd6\x93\xcc\x6b\x66\x67\xa1\x41\x53\x93\x4c\x3e\x75\xc0\xc8\xb5\xce\x5b\x9b\xbe\xd0\xe8\xd8\x9d\x89\xc1\x18\xef\x82\xe9\x2c\xb8\xba\x17\x51\x9b\xc7\x66\xb2\xb6\x94\x7f\x8f\x6f\x25\xf1\xa6\xb6\x8a\xb5\xb3\x10\x4b\xb7\xfc\x82\x7e\x7b\x07\x7e\x8d\x18\x40\x83\x01\x78\xc5\x07\x12\x2c\x2d\xe1\xbe\xc1\xf6\xa4\x42\x3f\xd9\x85\x49\xe7\xae\xfb\x76\xfa\x26\x3b\x6f\x47\x82\xdf\xa3\xad\x47\x37\x88\xb1\xb5\x0a\x0a\xba\xa1\xb0\xb9\x4d\x1f\x37\x6f\xa5\xcb\x09\xf4\x5a\xcc\xe3\xbb\x05\xb5\xf2\xe8\xec\x27\x7e\x6f\xdf\x1f\x9f\x16\xcd\xe2\x22\x3f\xc3\xd7\xd7\x97\x9f\xaf\xce\xf5\x35\x9d\x7c\x8d\xd7\x27\x47\x31\x3f\xc3\xe3\x7d\xf3\x6d\xcb\xe8\x3c\x60\xd0\x14\xe5\xda\x73\x46\xae\x22\x0e\xed\x96\x42\x63\x72\x54\x0b\x39\xb8\x7f\x70\x0c\xc3\x09\x64\x62\xf8\xe5\xff\x04\x00\x00\xff\xff\xa9\x5c\xf9\x31\x0c\x04\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 1036, mode: os.FileMode(438), modTime: time.Unix(1590200575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/TwitterGeo.css": publicTwittergeoCss,
	"public/TwitterGeo.js":  publicTwittergeoJs,
	"public/index.html":     publicIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"TwitterGeo.css": &bintree{publicTwittergeoCss, map[string]*bintree{}},
		"TwitterGeo.js":  &bintree{publicTwittergeoJs, map[string]*bintree{}},
		"index.html":     &bintree{publicIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
