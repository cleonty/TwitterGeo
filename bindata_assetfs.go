// Code generated by go-bindata.
// sources:
// public/TwitterGeo.css
// public/TwitterGeo.js
// public/index.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicTwittergeoCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\x4b\x4e\xf3\x40\x0c\xde\xe7\x14\x96\xfe\x45\x36\xff\x48\x05\xd4\xcd\xf4\x16\xdc\xc0\xc9\x4c\x52\x8b\x89\x3d\xf2\x38\x34\x05\xf5\xee\x28\x8f\x42\x10\x12\x62\x67\x5b\x9f\xbf\x57\x23\xe1\x0a\xef\x15\x40\xc6\x10\x88\x7b\x0f\x87\x53\x05\x30\xa0\xf6\xc4\xcb\x72\xab\xfe\x0d\x98\x57\x8c\x14\x32\x12\xf6\x80\x4d\x91\x34\x5a\x9c\xb1\x26\x79\xfb\x4a\xb1\xb3\x6d\x54\xea\xcf\xe6\xe1\xe9\xf1\x90\xa7\x79\x6f\xc4\x4c\x86\x3b\xa1\x49\x76\x19\x39\xa6\x5f\x68\xef\x16\x70\x34\xf9\x94\x79\xd8\xe8\x7e\x2a\x2d\xf3\x9b\x23\x0e\x71\xf2\x70\x5c\x34\xb1\x7d\xe9\x55\x46\x0e\xae\x95\x24\xea\xc1\x14\xb9\x64\xd4\xc8\x76\xda\x67\x3e\xae\xac\x16\x27\x73\x98\xa8\x67\x0f\x6d\x64\x8b\x3a\x5f\x3b\x61\x73\x1d\x0e\x94\xae\x1e\xea\x67\x69\xc4\xa4\xfe\x5f\x17\xe4\xe2\x4a\x54\xea\xea\x25\x53\xa2\x62\x7f\x6a\x69\x6f\x78\x57\x0b\xc0\x85\x82\x9d\x77\x9d\xc9\x6b\xd4\x2e\xc9\xc5\x5d\x3d\x94\x56\x25\xa5\x6f\xd7\xc9\xc3\x99\x42\x88\xfc\x25\x9f\x68\x71\xd0\x8e\x5a\xe6\xb8\x59\x68\x0d\x71\xab\x3e\x02\x00\x00\xff\xff\xb2\x26\x5c\x12\xe8\x01\x00\x00")

func publicTwittergeoCssBytes() ([]byte, error) {
	return bindataRead(
		_publicTwittergeoCss,
		"public/TwitterGeo.css",
	)
}

func publicTwittergeoCss() (*asset, error) {
	bytes, err := publicTwittergeoCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/TwitterGeo.css", size: 488, mode: os.FileMode(438), modTime: time.Unix(1499152217, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicTwittergeoJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xdd\x6e\x1c\xb9\xb1\xbe\x37\xe0\x77\xe0\x0e\x04\x4c\x6b\x3d\xea\x19\xd9\xbb\x7b\xf6\x8c\x34\x3a\xf0\xef\x5a\xe7\x48\xb2\x61\x4b\xc7\xc9\x3a\x82\x44\x35\x6b\xba\xb9\x62\x93\xbd\x6c\xb6\x46\x13\xed\x00\xc9\x13\x2c\x90\x27\xc9\x45\x82\xe4\x22\xc9\x33\xc8\x6f\x14\x90\xcd\xee\x66\xff\x8d\x64\x20\xd8\xbd\x11\x34\x64\xb1\xaa\xf8\x55\xb1\xfe\x7a\xfc\x25\x0a\x99\xb8\xc0\x0c\x85\x42\x84\x0c\xd0\x97\xe3\x87\x0f\x1e\x3e\x98\x67\x3c\x50\x54\x70\x74\xbc\x00\x50\x9e\xd2\x7f\xdf\x5c\xfc\x00\x81\x1a\xa1\x18\x27\x23\xc4\x68\xaa\x36\xd1\xcd\xc3\x07\x08\xa9\x88\xa6\xbe\x43\x81\x66\xc8\xf9\xb5\x53\x92\xc4\x38\x41\x33\x7d\xba\x5a\xa2\x7c\x2e\x3e\x50\x4e\xc4\xa2\x5a\xd3\x9c\xd1\xcc\x08\x70\xcf\xca\x4b\x90\x9a\xb3\xfe\x15\x48\xc0\x0a\x0e\xcd\x9a\xb7\x59\x51\x45\x2a\x66\xcf\x05\x57\xc0\x55\x41\x1a\x82\x7a\x5d\xad\xba\xc4\x95\xec\x3a\xdb\xfd\x72\xdd\xa5\xd6\xea\xec\x2b\x88\xeb\xb4\x07\x76\xd5\xa5\x14\xfc\x69\xa0\xe8\x95\xdd\x05\x0e\x32\x45\x33\xf4\xf1\xb4\xa2\x20\x70\x91\x85\x68\x86\xe6\x98\xa5\xb0\xf3\xf0\xc1\x4a\x23\x6e\x80\xf6\x13\x29\x94\x50\xcb\x04\x1a\x8a\x6b\xea\xc2\x24\x9e\xc5\xfd\x0a\x4b\xc4\x28\xbf\x7c\xaf\xb0\x2c\xef\xeb\x20\xef\x2b\xb8\x56\x3e\xc3\xa9\xda\xe7\x04\xae\xdf\xcc\xbd\x41\xa4\x54\x92\x4e\xc7\xe3\x41\xae\xaf\xe6\x90\x48\x31\xa7\x0c\xf6\x63\x1c\xc2\x89\x64\x5d\x7c\xb2\x14\xa4\x6f\xe9\xce\xa8\x26\x3c\xcb\x24\x3b\x33\xcc\x4a\x3e\x73\x21\x63\xac\x14\x90\x63\xb8\x56\x1d\xab\x34\x06\xc7\x26\xaf\xdc\x75\xaf\xd2\x46\x8b\x7a\x9b\x4b\x3a\xa0\xfc\xd2\x39\x71\x52\xdf\xb1\x67\xe8\x1c\x79\x15\x06\x7b\x33\x34\xb1\xe0\xe4\xec\x34\x02\xaf\x24\x0e\x63\xc7\x23\x5a\x08\xa5\xd9\x45\xaa\xa4\x37\x19\x55\x68\xe6\xcc\x2b\x88\xef\xcb\xc3\x61\x80\x72\x0e\x35\x58\xd0\x0c\x9d\x6f\xdc\xb8\x4a\xad\xd0\x2e\x46\x0a\xcb\x10\xd4\x6c\x70\x76\xc1\x30\xbf\x1c\xa0\x48\xc2\x7c\x36\xd8\xb8\x71\x25\xaf\x06\x7b\x8d\x85\xdd\x31\xde\x3b\x37\x7a\xae\x10\xb0\x14\x8a\x7b\x6b\x48\x2a\x37\x2b\xe1\x40\x28\x10\x3c\x15\x0c\x8c\xe3\x7b\xc3\x23\xa1\xd0\x5c\x64\x9c\xa0\x93\x77\x07\x88\xf2\xfc\xcd\x0e\x47\xdd\x17\x2c\x00\x59\x75\xdf\xaa\xf3\x4c\xae\x9b\xfe\x23\x41\x65\x92\xa3\x8f\xf9\xe1\xf3\x5d\x42\xaf\x50\xc0\x70\x9a\xce\x06\x31\x10\x8a\x07\x7b\xe7\x23\xbb\x87\x50\x6b\x77\x8b\xc1\x5c\xd5\x48\x10\xd2\xb0\x15\x30\x35\x7c\x66\x35\x68\x02\xba\xb7\x4b\xe3\x10\xa5\x32\xd0\xd4\x0d\x7f\x5f\x0d\xea\xb2\x84\xd1\x7f\x80\x52\xb5\x64\x30\x1b\x2c\x28\x51\xd1\xf4\xab\x6f\x93\xeb\xc1\x9e\x01\xdc\xd1\x73\x4c\xe8\xd5\x7a\xc5\x2f\x04\x59\x36\x14\xdf\x8d\xbe\xaa\xd3\x44\x80\x09\xe5\xe1\x60\xef\xb3\x6e\xb4\x71\xd3\xfd\x4a\x39\x8e\xc1\x78\xc6\xee\x38\xfa\xaa\x21\x39\xd9\xdb\xb8\xa9\x19\x6e\xb5\x3b\x4e\x5a\x34\xb7\x7f\xfa\xf4\x87\xdb\xbf\xde\xfe\xe3\xd3\xcf\xe8\xd3\x1f\x6f\xff\x75\xfb\xb7\xdb\xbf\xdc\xfe\xf9\xf6\x9f\xb7\x7f\xff\xf4\xf3\x14\xb9\x0c\xa8\x91\xa4\x19\xe8\x93\x7d\xb0\xd8\x9f\xfa\xd7\xa9\xff\x83\xa0\xdc\x1b\xfe\x8e\x0f\xb5\x3b\xad\x76\x7a\xc2\xde\xab\x46\xcc\x68\x05\xbe\x72\x01\x13\xf2\x3d\x48\xb1\x3f\x3f\x02\x20\x40\xbc\xeb\xd2\xdb\xad\xc7\x79\x83\xc9\x00\x3d\x42\xd7\x9b\xc5\x03\xdd\x7a\xbc\x59\xb9\xa5\x7e\xdd\x04\x2b\x2d\x83\xc3\x02\xbd\xc0\x0a\xbc\x16\xac\x79\xa0\x27\x67\x58\x55\x51\x2a\x8a\xd0\xac\x25\x5c\x73\x32\x51\x5b\x64\x32\xf5\x36\x2b\xea\x38\x5e\x43\x7d\x48\x79\xa6\xa0\x46\x4f\xc8\x1a\x7a\xa3\xa4\x43\x7c\x78\xb8\x8e\xb9\xe0\x2a\xf2\x36\xd1\x23\xb4\x5d\x9d\x58\x2e\xd7\x9c\xf8\x2d\x60\xe9\x6d\xa2\x2d\xb4\x3d\x99\xe4\x47\x2c\x92\xe7\x1b\x37\x51\xb4\x9a\x6e\xdc\xc4\xf1\x0a\x6d\xdc\x10\xb2\x1a\x6f\xdc\x1c\x1e\xea\xbf\xcb\xe5\xea\x7c\x9d\x3d\x4f\x5a\x31\xbd\x65\xd1\x42\x48\x91\x9f\xd4\x82\x2a\x05\xd2\x0f\x44\x3c\xee\x73\xf5\x34\x90\x00\xfc\xcc\x78\x7c\xbf\x7c\xb7\x54\xe8\x4d\xa2\x58\x51\x95\x11\x18\x21\x26\x78\x68\xfe\x2d\x93\x4b\x4b\x76\x08\xa2\xf4\xb2\xe2\x60\x57\x04\x0c\x41\xf8\x81\x10\x92\x50\x8e\x15\xa4\x1f\x27\xa7\x36\x84\x96\x32\xee\x73\x6a\xfb\xd4\x8d\xf0\x9d\x0a\x25\x0c\x07\x50\xcb\x7a\x66\xe5\x79\xc5\xa5\x4b\x90\xa1\xf1\x2f\x74\x02\xa0\x3c\x3c\xbb\x10\xd7\xdd\xda\x6a\x7e\x86\x2a\xb5\xaf\x24\x2f\x13\x75\x31\x97\xfa\x07\x58\x1d\xf0\xf0\x99\xd9\xf6\x8a\x14\x31\x17\x12\x79\xfa\x18\x45\x33\x34\xd9\x41\x14\xed\xb6\x34\xf2\x19\xf0\x50\x45\x3b\x88\x3e\x7a\xe4\x64\xa8\x5c\x90\x0f\xd7\x0a\x38\xf1\xca\x65\x03\xf4\xb4\xc5\xe4\x23\x3d\xfd\xb8\x7d\x3a\x42\xe3\x71\x65\x08\x44\x53\x9d\xcb\x80\x81\x49\xd7\xdb\x0e\x0b\x1e\x76\xb3\x98\x9c\x22\xc3\xa2\x34\x4b\x9d\xc5\xa4\x60\xb1\x6a\xe4\x40\x7d\xc5\x00\xb8\x32\x7e\x65\x35\x0f\x41\x3d\x37\x4b\x25\x1a\x8e\x8b\xe4\xc4\x3e\xc3\xaa\xda\x75\x7c\xa1\xd8\xe6\xa1\xd7\x88\x51\x65\xf1\xdb\xc4\xdf\x56\xc0\x16\xa8\x44\xa4\x54\xfb\xf6\xb4\x02\xd4\xe0\x56\xba\x77\xb9\xaa\xa1\x28\x45\xdb\x4b\xd9\xdd\x18\x27\xd3\xb2\x5c\xb7\x6b\x8a\x2a\x06\xd3\xee\x24\x6f\x14\xcd\xf5\xcd\xd5\xf4\x31\x21\x45\xe1\xeb\x0d\x03\x46\x83\xcb\xa2\xa8\xc0\xb6\x2e\xf6\x2f\x28\x27\xc6\x91\x37\x6b\x31\x26\x67\x70\xc7\x53\xde\x77\xcb\xf6\xce\xe7\x5c\x2b\xec\x9b\x90\x39\xd5\xbd\x45\x29\xc8\x2b\xec\x69\xab\x85\x28\x11\xb9\xfe\x60\xaa\x00\xf4\xe4\xf1\xc4\xb9\xae\x55\xba\xd6\xc2\xac\x53\xfc\xa0\xea\x20\x7a\x4a\x79\x34\x43\x44\x04\x99\x76\x3b\x7b\xe6\x65\xee\x84\xde\x90\xd1\x61\x2e\x95\x51\xdf\x94\x0f\x47\xd8\xe4\xc6\xa1\xee\x4b\xb6\x42\x29\xb2\x64\x8b\x2a\x88\x87\x05\x11\xe5\x1c\xe4\xeb\xe3\xc3\x83\xe2\xf1\x3b\x17\x2b\x68\x30\x21\x2f\xaf\x80\xab\xfb\x9b\x6b\x94\xf7\x2c\x8d\xbe\xc8\xc7\x49\x02\x9c\x3c\x8f\x28\x23\x1e\xa3\x35\x78\x18\xed\x85\x45\x24\xc0\xd7\x5b\xb3\xd1\xa7\x99\x13\x5e\xe9\x9c\x6e\x67\xd8\x5f\x50\x04\x4c\xa4\x77\x38\x4d\x53\x8c\x39\xe2\xf5\xb3\x2c\x80\xe9\xe2\xa5\x43\xf4\x17\x15\x7c\x55\x60\xce\x7b\xc3\xda\x95\xcb\x30\x50\xeb\x30\x75\x62\x13\x8c\xed\x73\x25\xfe\x9f\xc2\xa2\x4c\xd1\x55\x94\x84\x08\x5f\x51\x21\xa7\x68\x90\xc6\x42\xa8\x68\x50\xbe\xec\x0b\x26\x82\x4b\xbd\xae\x7b\x90\x81\x7d\xd9\xdd\x52\x8c\x17\x1d\x18\xeb\x11\xe2\x35\xfd\x68\x4b\xc3\x31\xac\x9d\xcc\xef\xa3\xdd\x49\x66\xe0\x6e\x70\xa1\xe8\x7c\xf9\xa6\xdd\xf6\x56\x71\xac\x1b\x47\x02\x77\x21\xd9\x0b\x64\xa7\xb5\xd6\x5d\x52\x42\x2c\xae\xe0\xb3\xee\x59\xb4\xe7\x6b\x6e\xd0\x7b\xf5\xce\xb2\xb5\x23\x31\xf6\x4d\x0c\x3a\x13\x64\x1f\xf1\x47\x7a\xea\x07\x98\x31\x8f\x67\x8c\xe5\xcf\xe2\x0e\xe4\x31\x21\x6d\xa5\x6b\x3a\x47\x98\x13\x06\xd2\xb5\xc5\x32\x01\x31\x47\x76\x03\xcd\x66\x33\x34\x2c\xe8\x87\x77\xea\xe8\x27\x59\x1a\x95\x5c\xef\xf2\x8b\x54\x49\xb1\xec\x7d\xaa\x36\xd1\xa4\xa0\x0e\x71\x62\x2e\x5d\xbd\xd5\xfa\xe0\x4a\x8b\xf7\x3a\xe7\x55\x1d\xc3\xa8\xce\xc1\x93\xc9\x77\xcd\x01\x4e\xee\x22\x46\x82\x4e\x31\x19\x63\xce\x5e\x2d\xa8\xaa\xe2\x19\x54\x33\x1e\xe3\x8e\xd5\x65\x53\x50\xc7\x85\x8c\xea\xba\x4e\x9a\x4d\x5d\xb5\x03\x66\x0a\xf4\x9d\x5e\x7f\x72\xce\xf5\xfb\x10\x26\xa4\x35\xd7\xd3\x5e\xd4\x65\x97\x86\xba\xc5\xd1\x3e\x6d\x5d\x87\xa9\xd7\xb5\xe8\xa7\x9f\xd0\xfa\xba\x55\x15\x80\xc2\xa2\x6b\xee\xd8\x08\xfc\xc6\xa2\xee\xc3\xcd\x4d\x95\x3b\x9a\xf9\xbf\xdc\x35\xfe\xd5\xe9\xf3\x9e\xf5\x57\x23\xae\xd8\x24\xad\x02\xa5\x3e\x61\x29\x06\x29\x4c\x84\xde\xf0\x48\x20\x7d\x39\x1d\x47\x74\xdb\xaa\xf1\x70\x87\x29\x9d\x73\x94\xb5\x08\x1b\x13\x7f\x56\xfc\xb0\x17\xef\x35\x77\xbe\xaf\xa3\x84\x7d\x59\x6e\x81\xf9\xd9\x5e\xbe\x88\x28\x03\x1b\x9a\x4d\xf6\x9f\x53\x99\x2a\x93\xfc\xeb\x62\x59\x15\x77\xf3\xd2\xa0\xf3\xc8\xdd\x80\x34\xad\xd3\x76\xbd\xee\x8c\x91\x6b\xfe\xc5\xcc\x8e\xa3\xdb\xae\x56\x6f\x8c\xd2\x35\xfd\xcb\x1a\x84\x1d\x5f\xd7\x10\x77\xc8\x2b\x5d\xd0\x9a\xa0\x48\x7a\x65\xce\x2a\x5b\x8a\x55\x2b\x0d\x15\xe8\x9b\xf3\xf7\x78\x9d\x96\xf5\x11\x5c\xab\xf6\x33\x5d\x03\x53\x0d\x1c\x5e\x9c\x36\x73\xe3\x3a\x48\x3e\xb5\xb3\xe4\x36\x87\x47\x68\x7b\xa7\x31\x82\xb4\xd7\xae\x33\x3c\x75\x90\x59\x43\xe5\xb7\x70\xaa\xbf\xc2\xfa\xe1\x49\x17\x7d\x6f\xeb\x5c\x98\x12\xed\x39\x03\xe3\xf5\xec\xee\x85\xfb\x5b\x09\x57\x54\x64\xe9\x2f\x8e\xfd\xd6\xaf\x89\x7d\x07\xae\x5b\x68\xfb\x57\x35\x88\xe0\xff\x07\xcb\xb7\x12\xd2\xb4\x11\x2f\xc0\x31\x04\xf8\x81\xd0\xad\xb7\xae\x64\x9e\x4a\x29\x16\x27\x49\x55\xc8\x80\x9f\x48\xd0\x89\xfc\x05\xcc\x71\xc6\xaa\x9e\x1d\xfc\x54\x89\xe4\xad\x14\x09\x0e\x4d\xbc\xf7\xda\xe5\x63\xd3\x15\xbc\xcd\xe6\x18\xa7\x25\xfb\x85\x58\xf0\xff\x9c\xf4\x32\x00\xdc\x0f\xac\x0f\x11\x00\xeb\xc4\xa9\x47\x91\x3e\x35\xf2\xab\x2d\x34\xbb\x17\xc0\x14\x6e\xdb\xf3\x1e\xf8\x74\x91\x7f\xd6\x85\xda\x35\x58\xd7\x5b\x2c\x7b\xed\x76\x1f\x7c\x09\x4b\xa2\xed\x31\x2a\xea\xd9\xca\x9b\x5a\xb5\xc1\x1a\x36\x06\x87\x8a\x89\x41\xb9\x71\xbe\x55\xb5\x9a\xc1\xe7\x77\x20\x74\xd9\xba\x4f\x46\x28\x12\x31\x3c\xcb\x94\x12\x5c\xff\x32\x9d\x0d\x69\x14\xb2\xfb\x24\x2f\x65\xf7\x89\xf3\x29\xd4\x39\x86\x66\x35\x2e\x8d\x8f\x9a\xc4\xd6\xbc\xcd\x0d\x77\x1a\x11\x82\xb2\xa3\x88\x67\xcb\x7d\xdd\xe3\x1b\x2d\xdc\xcf\xb3\xd7\xef\x30\xa1\x99\xc6\xf9\x49\xb5\x1c\x82\x78\x93\xe8\x7b\xe9\xf5\xc2\xb3\x39\xbe\x60\xf0\x9a\x86\xd1\xd3\x20\xc8\x24\x0e\x96\x53\xd3\x51\x56\xd3\x16\x1a\x67\xf1\xd3\x10\xa6\xe8\xc9\x64\x32\x99\x94\x33\xa8\x18\x44\xa6\xa6\xe8\xf1\x7f\x4d\x26\xf9\x18\xa6\xf9\x65\xb9\xf6\x69\x38\x71\x3f\xc9\xaa\xc2\x47\xdc\xe2\xd2\xf4\x06\xbd\x35\x65\x51\x27\xbf\x2e\x81\x7b\xc3\x9f\x33\x1a\x5c\x96\xd6\x75\xe8\x42\x71\x2c\x9e\x67\x52\x02\x57\x6f\xed\x10\xce\xdd\x5e\x60\x15\x44\x87\x38\xa9\xed\xd9\x86\xa0\x30\x77\xc7\xc8\x3a\xe9\x9b\x14\xa5\x3f\x66\x58\xc2\xf6\x7f\x4f\xbe\xd6\xb0\x9a\x19\xdf\xd7\xdf\xf8\xdf\x3e\x79\xf2\xe4\xc9\x64\x94\x4f\xf7\xbe\x99\xf8\x5f\xeb\x85\xc9\xaa\xfa\x0c\x61\x18\xb6\x47\x88\x89\xd7\x67\xe6\xca\xbf\x36\x47\x85\xf9\x7e\x2f\x44\x3c\x45\xdb\xdf\x58\xb3\xe4\x43\xcb\xa9\xa3\x52\x35\x47\x3c\x5e\x26\xb0\x4f\xa6\x68\x18\x2d\x2f\x24\x25\x43\xbb\x73\x09\xcb\x0b\x81\x25\x79\x1f\x09\xa9\x82\x4c\xa5\xd3\xbc\xd3\x6e\x8f\xd6\xf2\xee\xac\x78\xe6\x1d\x48\x49\x60\x02\x93\x8e\xf6\xc9\x01\x4b\x16\x7e\xb9\x5d\x22\x51\xce\xb3\x8b\x0b\xea\x8b\xd7\xa6\xd8\x3a\x8c\xe5\x54\x8d\xe4\xfc\x56\x50\xf3\x15\xb8\x9a\xf7\x1e\x09\xa9\xa2\x97\x38\xad\x42\xb4\x31\xd1\xa2\x4d\xf9\x5e\x64\x2a\xfa\x00\x0d\x4a\x42\x53\x85\x79\x00\x68\x56\xb3\x4b\x08\x22\x06\x25\x97\x7e\x9a\x44\x20\x69\x80\x99\x1f\x88\x38\xc9\x14\xbc\xb0\x07\x9e\x81\x76\x6b\xee\x59\xa5\x46\x85\x4c\x97\x79\x79\x79\xaf\x14\x33\x46\x8f\x27\x93\xc9\xa6\xaf\xc4\x2b\x7a\x0d\xc4\xdb\x2e\xe8\x4b\xda\x43\xac\x22\x3f\xa6\xdc\xcb\x57\x46\x8d\x27\xde\x18\x4e\xab\xd2\x30\x16\xd0\x12\xe6\x72\x38\xee\xc2\x5c\x1b\x8f\xbb\x1f\x5f\x1a\x03\xf2\xd1\xfa\xd9\xb8\xc1\x18\xb0\x0c\xa2\x13\xa9\xeb\x74\xe0\x3a\x9d\x9e\xbc\xdb\xf7\xce\x8b\x8f\x47\xe3\x7c\x7f\xfc\x3f\x3f\xce\x42\x10\x7a\x7b\xba\x71\x53\x48\x5b\x8d\x36\x6e\x4a\x01\xfa\x47\x7e\xd7\xd5\x65\x7c\xde\x14\xf0\x0e\x7e\xcc\xa0\x0c\x1d\xbf\x39\x3c\x78\xad\x54\x62\x17\xad\x36\x35\xc2\x7c\x4a\x39\xfc\xee\xe5\xf1\x70\x54\xe9\x38\x32\x41\xae\x93\x9c\x6b\x27\xee\x4c\xbe\xb9\x1a\x3f\xa4\x82\xbf\x83\x34\x11\x3c\xd5\x58\xfc\xef\xfb\x37\x47\x7e\x82\x65\x0a\x5e\x9d\x91\xb4\x34\xc7\xce\xf7\xfa\x5a\xaf\xe3\x32\xf2\x53\x85\x55\x96\x42\x5a\xf6\xc8\xe5\xfb\x2a\xa3\x65\x35\x9b\xb0\xfd\x8d\x35\x7d\xe7\x25\x40\x4a\x21\x7b\x6e\xe1\x36\xcc\xd0\xcf\x24\x05\x4e\x6a\x63\xd7\x3b\x9e\x7c\x31\x1a\xed\x7a\xfa\xae\xc8\x81\x0e\x5a\x83\x51\xcd\x0f\xbf\x17\x22\x2e\xbe\xa3\x96\xa5\x68\x6d\x0f\xed\xa1\xed\xed\x7a\xed\xe2\x0a\x6f\xd7\x21\x1d\xda\x86\x20\xde\x67\x41\x00\x69\x3d\x3c\x15\x5f\x6a\x3a\x74\x1d\x1e\xc1\xa2\xfa\x92\x33\x1c\x95\xff\xe7\x9f\xe7\x52\xbf\xfa\x58\xd9\xda\x29\xfc\xb9\x96\x98\x13\x6d\x45\xfb\xea\xaa\xcf\x96\xd3\x7e\xbe\x96\xc6\x7c\x2e\xeb\x93\xe0\xc4\xea\x6e\x60\xd6\x63\xf2\xb2\xe5\x2b\x16\x09\xcc\x40\x2a\x6f\xf0\x5e\x48\xb9\x1c\x21\x2e\x4a\x0d\x10\xbe\xc2\x94\xe9\xca\xc1\x1f\xdc\xc1\xdf\x64\xdb\x22\xd5\x76\x09\xe1\xf8\x8a\x86\x58\x09\xa9\x55\x61\x22\x30\xf5\x6b\xfd\x98\x57\x94\x2f\xd6\x7a\xb5\x4f\x20\xc5\x9e\xb9\x45\xe7\x8e\x2d\x7a\xee\xa3\xa8\x53\x16\xac\x99\x77\x26\xf5\xaf\x6a\x44\xe2\x10\x38\x29\x2a\xcb\xae\x37\xd1\x2a\x53\xbb\x39\xe9\x97\x71\x16\x44\x98\x87\xf0\x39\xec\xd6\x99\xb7\x5d\x0b\xdd\xdf\x08\x3a\x41\x34\xea\xa8\x5f\xc2\x12\xeb\xea\xbc\xbe\xba\xa2\xaa\xa8\xd7\x14\xca\xad\x52\xbc\x0a\x38\xd5\x6a\x19\x63\xaa\xa5\xbb\x3e\xcd\x75\x80\xdc\x9e\x59\xe6\x57\xfe\x77\x00\x00\x00\xff\xff\x71\x2f\xea\x1a\xe1\x29\x00\x00")

func publicTwittergeoJsBytes() ([]byte, error) {
	return bindataRead(
		_publicTwittergeoJs,
		"public/TwitterGeo.js",
	)
}

func publicTwittergeoJs() (*asset, error) {
	bytes, err := publicTwittergeoJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/TwitterGeo.js", size: 10721, mode: os.FileMode(438), modTime: time.Unix(1504497393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x51\x4f\xd4\x40\x10\x7e\x37\xf1\x3f\x8c\x7d\xe0\x20\xe1\xba\x02\x0f\x1a\xed\x62\x50\x01\x89\x51\x30\xf2\x02\x6f\xd3\xed\x70\xdd\xbb\xed\xee\xba\x3b\xed\x51\x8d\xff\xdd\xb4\xb4\xc7\x79\xa0\xe1\xa9\x3b\xf3\x65\xbe\xf9\xbe\x99\x69\xf6\xe2\xe3\xf9\x87\xcb\xab\x8b\x63\x28\xb9\x32\x87\xcf\x9f\x65\xc3\x17\x20\x2b\x09\x8b\xfe\x05\x90\xb1\x66\x43\x87\xa7\xe4\xe0\x72\xa9\x99\x29\x64\xe2\x2e\x35\xe0\x15\x31\x82\xc5\x8a\x64\xd2\x68\x5a\x7a\x17\x38\x01\xe5\x2c\x93\x65\x99\x2c\x75\xc1\xa5\x2c\xa8\xd1\x8a\xa6\x7d\xb0\x0b\xda\x6a\xd6\x68\xa6\x51\xa1\x21\xb9\x97\xbe\x4c\x46\x2e\xa3\xed\x02\x02\x19\x99\x44\x6e\x0d\xc5\x92\x88\x13\x28\x03\xdd\xc8\xa4\x64\xf6\xf1\x8d\x10\x15\xde\xaa\xc2\xa6\xb9\x73\x1c\x39\xa0\xef\x02\xe5\x2a\xb1\x4a\x88\x83\xf4\x20\x7d\x25\x54\x8c\xf7\xb9\xb4\xd2\x36\x55\x31\x3e\xa9\xd3\xe0\xf3\x94\xdc\x5f\x25\x51\x05\xed\x19\x62\x50\xf7\x62\x70\x8e\xb7\xe9\xcc\xb9\x99\x21\xf4\x3a\xf6\x42\xba\x9c\x30\x3a\x8f\x62\xfe\xa3\xa6\xd0\x8a\x83\x74\x3f\xdd\x1b\x82\x5e\xc8\x3c\x26\x87\x99\xb8\xe3\xfb\x1f\xfb\x53\xad\xce\x37\x9d\x3e\x68\x90\x89\xd5\x4a\xb3\xdc\x15\xed\xd8\xb5\xd0\x0d\xe8\x42\x26\x15\xfa\xae\xa2\xd0\xcd\x26\xc2\xce\x4f\x3d\x5a\x32\xe3\x1c\x00\x32\x6d\x7d\xcd\x3d\x5a\xba\x8a\x12\xe0\xd6\x93\xcc\x6b\x66\x67\xa1\x41\x53\x93\x4c\x3e\x75\xc0\xc8\xb5\xce\x5b\x9b\xbe\xd0\xe8\xd8\x9d\x89\xc1\x18\xef\x82\xe9\x2c\xb8\xba\x17\x51\x9b\xc7\x66\xb2\xb6\x94\x7f\x8f\x6f\x25\xf1\xa6\xb6\x8a\xb5\xb3\x10\x4b\xb7\xfc\x82\x7e\x7b\x07\x7e\x8d\x18\x40\x83\x01\x78\xc5\x07\x12\x2c\x2d\xe1\xbe\xc1\xf6\xa4\x42\x3f\xd9\x85\x49\xe7\xae\xfb\x76\xfa\x26\x3b\x6f\x47\x82\xdf\xa3\xad\x47\x37\x88\xb1\xb5\x0a\x0a\xba\xa1\xb0\xb9\x4d\x1f\x37\x6f\xa5\xcb\x09\xf4\x5a\xcc\xe3\xbb\x05\xb5\xf2\xe8\xec\x27\x7e\x6f\xdf\x1f\x9f\x16\xcd\xe2\x22\x3f\xc3\xd7\xd7\x97\x9f\xaf\xce\xf5\x35\x9d\x7c\x8d\xd7\x27\x47\x31\x3f\xc3\xe3\x7d\xf3\x6d\xcb\xe8\x3c\x60\xd0\x14\xe5\xda\x73\x46\xae\x22\x0e\xed\x96\x42\x63\x72\x54\x0b\x39\xb8\x7f\x70\x0c\xc3\x09\x64\x62\xf8\xe5\xff\x04\x00\x00\xff\xff\xa9\x5c\xf9\x31\x0c\x04\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 1036, mode: os.FileMode(438), modTime: time.Unix(1504497359, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/TwitterGeo.css": publicTwittergeoCss,
	"public/TwitterGeo.js": publicTwittergeoJs,
	"public/index.html": publicIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"TwitterGeo.css": &bintree{publicTwittergeoCss, map[string]*bintree{}},
		"TwitterGeo.js": &bintree{publicTwittergeoJs, map[string]*bintree{}},
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
